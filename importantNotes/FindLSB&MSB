//int value;
int LSB = value & 1;
Alternatively (which is not theoretically portable, but practically it is)

//int value;
int LSB = value % 2;
Details: The second formula is simpler. The % operator is the remainder operator.
 A number's LSB is 1 iff it is an odd number and 0 otherwise. 
 So we check the remainder of dividing with 2. The logic of the first formula is this: number 1 in binary is this:

0000...0001
If you binary-AND this with an arbitraty number, all the bits of the result will be 
0 except the last one because 0 AND anything else is 0. 
The last bit of the result will be 1 iff the last bit of your number was 1 because 1 & 1 == 1 and 1 & 0 == 0