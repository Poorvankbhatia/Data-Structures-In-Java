While building a heap, lets say you're taking a bottom up approach.

You take each element and compare it with its children to check if the pair conforms to the heap rules. 
So, therefore, the leaves get included in the heap for free. That is because they have no children.

Moving upwards, the worst case scenario for the node right above the leaves would be 1 comparison 
(At max they would be compared with just one generation of children)
Moving further up, their immediate parents can at max be compared with two generations of children.

Continuing in the same direction, you'll have log(n) comparisons for the root in the worst case scenario. 
and log(n)-1 for its immediate children, log(n)-2 for their immediate children and so on.
So summing it all up, you arrive on something like log(n) + {log(n)-1}*2 + {log(n)-2}*4 + ..... + 1*2^{(logn)-1} 
which is nothing but O(n).

However, the main idea is, in Buildheap algorithm the actual Heapify cost is not O(logn) for all elements.

When Heapify is called, the running time depends on how far an element might move down in tree before the process 
terminates.
 In other words it depends on the height of node. In the worst case the element might go down all the way to the leaf 
 level.

Let us count the work done level by level. At the bottommost level there are 2^(h) nodes, but we do not call 
Heapify on any of these so the work is 0. At the next to level there are  2^(h − 1) nodes, 
and each might move down by 1 level. At the 3rd level from the bottom there are 2^(h − 2) nodes, 
and each might move down by 2 levels.

As you can see not all heapify operations are O(logn), this is why you are getting O(n).