Amortized Analysis is used for algorithms where an occasional operation is very slow, but most of the other 
operations are faster. In Amortized Analysis, we analyze a sequence of operations and guarantee a worst case 
average time which is lower than the worst case time of a particular expensive operation.
The example data structures whose operations are analyzed using Amortized Analysis are Hash Tables, Disjoint 
Sets and Splay trees.

Let us consider an example of a simple hash table insertions. How do we decide table size? There is a trade-off 
between space and time, if we make hash-table size big, search time becomes fast, but space required becomes high.

Dynamic Table

The solution to this trade-off problem is to use Dynamic Table (or arrays). The idea is to increase size of table
 whenever it becomes full. Following are the steps to follow when table becomes full.
1) Allocate memory for a larger table of size, typically twice the old table.
2) Cop the contents of old table to new table.
3) Free the old table.

If the table has space available, we simply insert new item in available space.

If we use simple analysis, the worst case cost of an insertion is O(n). 
Therefore, worst case cost of n inserts is n * O(n) which is O(n2).
This analysis gives an upper bound, but not a tight upper bound for n insertions as all insertions don’t take Θ(n) time.

Look at the diagram


So using Amortized Analysis, we could prove that the Dynamic Table scheme has O(1)
insertion time which is a great result used in hashing. 
Also, the concept of dynamic table is used in vectors in C++, ArrayList in Java.