Mutex:

Is a key to a toilet. One person can have the key - occupy the toilet - at the time. When finished,
 the person gives (frees) the key to the next person in the queue.

Officially: "Mutexes are typically used to serialise access to a section of re-entrant code that
 cannot be executed concurrently by more than one thread. A mutex object only allows one thread into
  a controlled section, forcing other threads which attempt to gain access to that section to wait until
   the first thread has exited from that section." Ref: Symbian Developer Library

(A mutex is really a semaphore with value 1.)

Semaphore:

Is the number of free identical toilet keys. Example, say we have four toilets with identical locks and keys.
 The semaphore count - the count of keys - is set to 4 at beginning (all four toilets are free),
  then the count value is decremented as people are coming in. If all toilets are full, ie. there are no free keys left,
   the semaphore count is 0. Now, when eq. one person leaves the toilet, semaphore is increased to 1 (one free key),
    and given to the next person in the queue.

Officially: "A semaphore restricts the number of simultaneous users of a shared resource up to a maximum number.
 Threads can request access to the resource (decrementing the semaphore), and can signal that they have finished
using the resource (incrementing the semaphore)."

Strictly speaking, a mutex is locking mechanism used to synchronize access to a resource. 
Only one task (can be a thread or process based on OS abstraction) can acquire the mutex. 
It means there will be ownership associated with mutex, and only the owner can release the lock (mutex).

Semaphore is signaling mechanism (“I am done, you can carry on” kind of signal). For example, 
if you are listening songs (assume it as one task) on your mobile and at the same time your friend called you, 
an interrupt will be triggered upon which an interrupt service routine (ISR) will signal the call processing task to wakeup.



You obviously use mutex to lock a data in one thread getting accessed by another thread at the same time. 
Assume that you have just called lock() and in the process of accessing data. 
This means that you don’t expect any other thread (or another instance of the same thread-code) 
to access the same data locked by the same mutex. That is, if it is the same thread-code getting executed 
on a different thread instance, hits the lock, then the lock() should block the control flow there. 
This applies to a thread that uses a different thread-code, which is also accessing the same data 
and which is also locked by the same mutex. In this case, you are still in the process of accessing 
the data and you may take, say, another 15 secs to reach the mutex unlock (so that the other thread 
that is getting blocked in mutex lock would unblock and would allow the control to access the data). 
Do you at any cost allow yet another thread to just unlock the same mutex, and in turn, allow the thread 
that is already waiting (blocking) in the mutex lock to unblock and access the data? Hope you got what I am 
saying here? As per, agreed upon universal definition!,

with “mutex” this can’t happen. No other thread can unlock the lock in your thread
with “binary-semaphore” this can happen. Any other thread can unlock the lock in your thread
So, if you are very particular about using binary-semaphore instead of mutex, then you should be very careful 
in “scoping” the locks and unlocks. I mean that every control-flow that hits every lock should hit an unlock call,
 also there shouldn’t be any “first unlock”, rather it should be always “first lock”.